(ns advent-of-code.2022.day-17
  (:require [clojure.string :as str]
            [clojure.set :as set]))

(def test-str ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>")
(def real-str ">>>><<><<<<><<<>>><<<>><>>>><<<>>>><<>>><<<<>>><<<<>><>>><<<<><<<<>>>><<>>><<><<><<<>><>>><<>><<<<>><>>><>>><<<<>>>><<>>><<<>><>>>><<<<>>><<>>><<>>>><<<>>>><<<><>>><<<<>>><>>>><<<>>>><<>>><<<<>><<>><<>>><>>>><<<<>>>><<<<>>>><<><<<>>>><<<>>><>><<<><<>><>>>><<>>>><<>>>><<<>>>><<<<><<<<>>>><>>>><<<>>>><<<><<<<>>><<>><<<>>><<>><<<<>>><>>><>>><<<><><<<<>>>><<>>><<<>>>><<<<>>>><<><<>>><>>><<><>>><<<<>>><<<<>>>><<<<>>><<>><<<<>>>><>><<<>>>><<<<>>><><<><>>>><<<<>>><>>>><<<>>>><<<>>>><<>>><<<<>><<>>>><<<<><<<><<<>>>><<<>>>><>><>>>><<<<>>>><><<>>>><<<>>><<<><>>><<>>><>><<<<>>>><<<><<><<>><>><<>>>><<<>>><<<<>>><<<>>><<>>>><<<><<<>>>><>>><><><<<<>>><<><<<>>>><<<<>>>><<<>>>><><<<<>><<<<>>><<<>><<<><>>><<<<>><<<><<<>>>><<>>><<><<<>>><>><<>>><>>>><<<><<><<<>><<<<>><>>>><<><<<<>>>><<>><<>>>><<<>><<<>>>><<<>><<<>><<<<><>>>><<>>><<<>>>><<<<>>><<>>>><<<<>>><<<<>>><<<<>>><<>>><<<<>>>><><<<<>>><<<>>><<>><<<<>>>><<>><><<<>>><<<<>>>><<<>>>><<<>>>><<<>>><><<<<>>><<<>>><<<<>><><<>>>><<<>><<<>>>><<<>>><<<><<<<>>><<<>>>><>>>><><>>>><>><<<<>>>><><<<<>>>><<>>><<<<>>>><>>>><<<<>><<<>>>><<<<><<><><>><>><<<<><<<>><>><<>><<>><<<>>>><<<>><<<><<<<>>><<<<>>><<<<>>><<<>>><<<<>>><<<><<<>><>>><<<<><<<>>>><<>>>><<<<>><>>><<<<>>>><<>><<<><<<<>><<<<>>>><<<>>>><>><<<>>><<<><>>>><<<>><><<<<><<<><<<<>>>><><<>>><<>><<><<<>><<<<>>>><<<<><<<><<<<><<<<>><<<<>>><<<>>><>><<<<>>>><<<<><<<<><<<<>><>><<<<>>>><<<<>>>><<<<>><<<<>>>><><>><<<>>>><<><<><>>><<<>>>><<<<>>>><>>>><>><<<<>><<<>>>><<<><<<<>>>><><<<<>>><<<<>>><<<><><<<>><<<<><<<>>><<<<><<<>>><<<<><<<>>><>>><<>><>>><><>><<><>>><<>>><<<<>>>><<>>>><>>><>><>>>><<<><>>>><<<><<<>>><<<><<<>>><<>>>><<<<>>><>><<<<>>>><<<>>><><<<>>><<>>><><<<<><<>><<<>><<<<>>><<<><<>>><<>>>><<<<>>><<<><<>><<<<>>>><>>>><<<>>><<>><<<<>>><<>>><<<>>><<<<>>>><<>><<>><<<>><><<>><<<><<<>>><<<>><<<<><<><<>>>><<<<>>><><<<><<<<>><<<>>><<>>><>>>><>><>>><<<>>>><<><<>><>><<<>>>><<>>>><>>><<<<>>><<<<>>><<<>><<<<>>><<<>>>><>><<>><><<<<><<>><<>><<<>><<>>>><<><<>>><><><<<<>>><>>><<<>><<<<><<<<>>>><>><<<<>>>><>>><<>>><>>>><<<<><><<<<>>>><>>>><<>>><<><<<>><<<><<>>><<<<><<<>><<><<<>><<>>><<<<><>>>><>><<<<>><<<>><<><<><<<<>>>><><>><>><<<><<<<>>><<<<><<>>>><<<<>>>><<>>>><<>><<>><>><<<<>>>><<<<>>><<<><<<>>><<><<<<>>>><<<>>>><<<<>>>><<<>>><>><<<<>><><<<<>>>><<>>>><<<><<<>>><><>><<<><<<>>><<><<<>><<<<>>><><<<>>>><><><<>>><<<>><>>><<><<<>><><<>>><<<<>>><<>><<<>>><>><><<><<<<><<<<>>><<>>>><<<>><>><<<<>><<>>>><<>>>><<<>>><<<<><><<<<>>>><>>>><>>>><>><<>>>><>>>><<<>>>><<<><<<><<>>><>><>>><>>>><<>>><<<><>><<<<>><<<<><><<<><<>><<<<>>><<<<><<<<>>><<>>><<<<>><>>>><>><<<<>>><><<<<><<>><<<<><<>>><<<>><<<<>>><<<>><<<><<>><<<<>>><<><><<<>>><<<<>>><<<>>><<<><<>><>>><<<>>><<<>><<><<<>>><<<<>><<<><<<<>><>><<>><><>>><<<>>>><<<>>><<<>><>>><><<>>>><<<<><<<>>><<<>>>><<>>><<<>><<<<>>>><<<>>>><>>>><<<<>>>><<<<>><<>><>><<>>><<>>><<>>><<<<><>>>><<<<>>><>>>><<<<>>><<<<>>><<<>><<<>>>><<>>>><<<>>><>>><<<<><<<>>><<<<>><<>>>><>>>><<<<>>>><<<<>><<<<><>>>><<>><<<>>><<<<>>><<><><<>><<>><<<>>><<>>><<<<>>><<<>>>><>><<<>>>><<<>>>><<<>>><>>>><<<>><>><<<<>><>>><<<<>><<>>><<<>><<>>>><<<<>>><<>>><<<><<<>>>><<><<><>>><<<><<>>><<<>>><>>>><<>>>><<<<>>>><<>><<<>>><<>>><<<>><<<>><<>>><<<>>><<<>>>><<<>>><>><<>>><<>><<>>>><><<<><<><<<>>><<<<>>><<<<>><<<<>><<><<<>>>><<<>>>><<<>><<<>><<>>><<<>>><<<<>>>><<<>><<>>>><>>>><<<>><<<<>>>><<<<><<<<>><<>><<<<>>>><<<>>><<<>><>>><>>>><<<<>><<<<>>><<<><<<<>>>><><>><<>><<<<>>>><<>>><<<>>><<>>><<<><<<>>><<>><<<>>>><<>>>><>><>>><<<<>>><<>>><<<><>>><<<>>>><<<>>><><<><<<>><<<><><<>>>><<<>><<<<>>><<<><>><>>>><>>><<>>>><>>><<<<>>><<<>>><<>>><>><<><>><<<>>><<<>><<<><<>><<<><<><<<<><>><<<><<><<<>>>><>>><<<<>>>><<<>>><<><<>><<<<>><>>><>>><<>>><<<<>>><<<<>>>><<<>><<>><<<<>><<<><<<>>><<>>><>><>>>><<><<<>>><<>><<<<>>><>>><<<<>><<<><<>>><<<<><<>><><<<>><><<<>>>><<<><<>>><>>><<<><>>><<<>>><<<<>>><<<<>><>><<>>><<<>>>><<<><<><<<>><<<<>>>><<<>>><<<<>>><<>>>><<<<>>><<<<><<<>><<><<>><<<<>>><<<>>>><<<<>>>><<<><<<<><<>><<<><<<<>><>>><<>><<><>>>><>><<<<>>><<<<><<<<>>><<>>><<>><<<<><<<>>><>>>><<<>><<<>><<<<><<<>>><><<>><<<<>><<<<>>>><<<<>><<<<>>><>><<<>>>><>>>><<<>>>><<>>><<<<>>><>>>><<>>><<<>>><<<>><>>>><<<<>><>>><<<>>>><<>>>><<<<>>><<<<><>>>><>>><>>><<<>><<<>><<<>>>><>>>><<>>>><<<<>>>><<<>>><<<>><>>><<<<>>>><<>>>><>>><<<>>><<>>>><<<<>>>><<<<><<<><<>>>><<<><<>>><<<<>><<<>>>><<<>><<>>><<<<><<<>>>><<<<><<<<>><>><<<>>>><><>>><<<>>><<<>>><><>>>><>>><<>>>><<<<>>>><<>>>><>>><<><>>>><<>><<>>><<<<>>><<<>><<<<>>><><<<<>><<<<>>><>><<<<>>><<<><<<<><><<<<>>><<><>><<<<>>><>>>><><<>>>><<<><>>>><>>>><<<>>><<<<>>>><<>><<><<<<><<<<>><>>>><<<<>>>><<<>>>><>>><<<>><<<>><<<>>>><<<>>>><<<>>>><<<<>><>>>><<>>><>><>>><<<<>>><<>>>><<<<><>>>><<<<>>>><<<<>>>><<<<>>>><<<>><<<<><<<>>><<>>><<>><>>><><<>><<><<<<>>><>><>>><<<<>>>><>><<<>>><>>>><<<><<<<><<<<>><>><<>><<<><<<<><<<>>><><>>><<>>>><<>><<<>>><>><<<>><><<<>>><<<<><<>><<><<<><<<>>><>>><>><<<<>>><><<<<>>>><<<<>><<<<>>><<<><<<<>><<<<><<>>><<<<><>>>><>><<<<><>><>>><<<>><<><<>><>>>><<<>>><<>>>><<<<>>>><>>>><<<><>>><<>><<<<>>><<<><<<<>>>><<<<>>><><<<>><<>><<<>><>>><<>><><>>>><>>><<<>>><<>>><<>>>><>><<<>>><>>><<<>><><<<>>><><<><><><<<<>>><<<>>><<<<>>>><<>><<>>><<<<>>><<<><<<>>><<<><<><<<><<<<><<><><<<<>><<<<>>><<<>><<<<>>><<<>>>><<>><<<><><<>>>><<>>>><><<>>>><<<><<<>>>><<<>>><>>><<<<>>><<<>><>>>><<><<<><>>>><<<<><<<<>>><>><<>>>><<<><>>>><<<><<>>>><<<<>>><>>><<<<>><<<>>>><>>><<<<>>><<>><<<>>>><<<<>>><<><<<<>>>><<>>>><<>>>><<<<>><<<<>><<>>><<>>>><>><<<>>>><>>>><<<<>>><<<<><<<<><<>><<>>>><>><<><<<<>>><<<<>>>><<<>>>><>><<<<>>><<>>><<<>><<<<>><<><<<>>><<<<>>>><<<<><<>><<><<>><<<>><<<<>>>><<<<><>>>><>>>><<<<>>><<>>><<>><<><<<>>><<<<>>>><<<><>>>><<<><<<>>>><<<><<<><<<<>>><<<<><<<<><<>>><<>><<>>>><>><<<<>>>><<<<>>><>>><<<>><<<<><<<>>>><<<>><<><<>><<<<><<><>>><<<<>>><>>><<>>><<<<>><<<<>><>>>><<><<>><>><<<<><<>>>><><<<><<<><>>><<<>><<<>>>><><<>>>><<<><>>><<<><>>>><<<<>><<<>>><<<><<>><<<>>><<>><<<>>>><<<>>>><>>>><<><><<><>><<><<>>><<><>>><>>><>>>><<>><<>>>><<<>>><<>><>>><>><<<<><<>>>><<<>>>><>>><<<>><>>>><<<<><<<>><>>><<<>>><<<<>><<<<><<><<<<><<<><<><<<>><<<<>>>><>>>><<<<>><<>>>><<><><<<>>><<<>>><<>><<<<><<>>><<<><><<>>><<<><<><<<>><<>><<>>>><>><<<<>>><<<<>>>><>><<<<><<<>>>><<<><<<>><<>>>><>><<<<>><<<<>>><<<>>>><<<>>><<<>>>><>>>><><<>>><<>>>><<<<>>><>>>><>>>><<<<>>>><>><<<<>><<>><<<><<>>><<<>>>><<<<>><<>>><<<<>>><<<>><<>>>><<<><<<>>><>>>><><<>><<<>>>><<<>>>><<><<<>><<>><<<<>><<<><<<<><<<<><<<>>><><<<>>><<<>>><>><<<>><<>>>><<<><<>>>><>><<<>>>><<>>>><<>>><<>>><>>><<<<><<<<><>>><><><>>>><<<<>>>><<<><><<<>>>><<<<>><<<<>>>><<<<><<<><<<<><<><<>><<<><<><<<<>>><<<<><<<<>>><>>><<>>><>><<>>><>>>><<<<>>><>>><<<<>><<<<>>><><<<<>><<<>>><<>>>><<<>>>><<><<<<>>>><<><<<<><<<>>><><<<>><<<>>>><>><<>>>><<>>>><<>><<<<><>>><<<<>>><>>>><<<><<>><<<<>>>><<>>><>><<<><<<>>>><>>>><<<<><<>>><<<<>>>><<<>><<<>>><><<<><<<>>>><<<<><<>><<<<>>><>><<<>>>><<<<>><<<<>>><<<<><<<<><<>><<<>>><<<<>><>>>><<<>>><<><>>>><>>><>>>><<<><><<<>>>><>>><>><<<<><<>>>><<<<>>>><>>>><<<>>>><>>>><<<>><<<>>><>>><<<>>><<><>><<<<>><>><>><><<>>>><<<>><<>>>><>><><<<>><<>>><>>>><<<<>><<<<>>>><<<<><>>>><<<<>><>>>><<<>>>><<>>><<>>><<<>>><<<>><<>><>>><><<<>>><<<><>>><<<<>>>><<>>>><<>>><<><<<><><<<<>><<>>>><<<<>><>><<>><<<>>><<<>>>><<><<<>>>><<<<><<<<>><>><<><<>>>><>>>><<>><<>><<><<>>><<<<><><><<<<>>>><>><>>><>><<<>>><<<<>>><<>>><<<<>>>><>>>><>>>><<<>>><<>>>><>>><><<<>>><<<<>>><<<>><<>>><<><>>><<><<>>><<<>><>>>><<><<><<<><<<>>><>>>><><<><<<>>><<<<><>>><>>><<>><<><<<>>>><><>>><<<><<<<>>>><>><<<<>><>>>><>><><<<<>>>><<>>>><>>><<<>><<>><<<<>>><<>>><<>>><<<><<><>><>>>><>>>><<>><<<<>><<>>>><<<><<>><<<><>><<<<><<<<>>><<<<><<<<>>><<><<>>><<>><<>>>><>>><<>><<<<><<<>>><<<<>><<<<><>><<<<>>>><>><>>>><>><>><<<<><<<>><<<<>><<<><<<<>>><<>><>>><>>><>><<>>><<<<>><<>>><<><<>>>><<<<><<<>>>><>>><>>>><<>>>><>><<>>><<><<<>>>><<<<>><><>><<<<>>><<>><<>><<<<><><<><<<>><<<<>><<>><<<><<>><<<<>>><>><>>><<<>>>><><>><><<>><>>><<<<>><<>><>>>><<>><<<<>><<>><<>>>><<<>>>><<<>>><<><>>><<>>>><<>>><<<>>>><<<>>><<<>><<>>><<>><<<<>>><<<<>><<<<>>><<>>><>><<<>>>><<<>><<<>>><<>>><<>>>><<<>><<<>><<<<><<<<>>><<<<>>><<>><<<>>><<<<>>>><>>>><<<>><<<<><>>>><<<>><<>><<>>><><<>>><>><>>><<<>>><<<<>>><<<>>><>>>><>><>>>><><<>>><>><<<>>><><<>>>><<>>><<<<><>>><<>>><>>><>><><<>><>>><<>><<>>><<<><<<<>>>><<<<>>><<<<>><<<><><<>><<<>><>>>><<<>><<<<><<<<>><<<<>>>><<<>>><><<<<><<><>><>>><>>>><<><<<>>>><>><><>>><<><<<>>><<>><<<<><<<>>><<><<>>><<<>>><<<<><>><<>><>>><<<<>><<><>>><<<<>><<<<>><<>>>><<<<>>><<><<>>><>>><>><<>><<<<>>><<<>><<<>>><<<<>><<>>><<<>>>><<<>>>><<><><><<<<>><<<>>><<<<>>>><<>>><<<<>><>><<>><<>><<<>>>><<>>><<>><<<><<<>>><<>>><<<<>><>>>><>>>><>>><<>>><<>>>><<<>>><>>>><<<<>>><<<>><<<<>>><<>><<>>>><<<><<<<><<>><<<>>>><<<<>>><<<<><<>>>><>>>><<<<>><>>>><>>><<<>>><<>>><<<<><>>><<<<><<><><>>><>><>>>><<<<>><<<><>>>><<>>>><<>>>><<>>><<<>><<<><<><<>>><<><>>>><<<<>>>><<<>>><<<>>>><<<<>>><><<<<>>><>>>><<>><<<<><<<<>><<<>>><<>><<<><>>>><<<>><>><<>>>><<<<>><<<<>><<>>>><<<<>>><<>>>><<<<><<<>><<<<>>><<<<>>>><>><<<<>>>><<<>><<<>><<><<<>>><<<>>><<<>>>><<<<>><<<>>>><>>>><<><<><<>><<<>><<>>>><<>>>><><<<>>>><<<<>>><<>>>><><>>><<><<>>>><<>>>><<>>><<>>><<<>>><<<<><<>>>><<<<>><<<<><<<>>>><<>>>><<>>><<<><<<<><<<<>>>><><>><<<>>><<<>>><<>><<<>>><>>><<>><><<>><<>><<>><<<<>><<<>>><>>>><<<<>>>><<<>>>><>>>><<>><<<>>><<><<<<>><<<<><<<>>><><<<<><<<>><<<<>>><<>>><<<>>>><<<>>>><<>><<<<>><<<<>>><>><<<>>><<<<>>><>>><<><<<<><<>>>><<<<>><<<><>>><<>><<<<>>><<<>>><<>>>><<<<><>>><>>><><<><<>><>><<>><>>><<<<>>>><<<>>><<><<>>><<><<<>>><<><<<>>><<<><<<<>>><<><>>><<<<><<<>><<<<><>>>><>><<<<>>>><<<>>>><<<><><<<><<>>><<<<>><<<<>>>><>>>><>>><><<<<><<<<><<<><<>>><<<<><<<<>><<<<>>><<<>>><<><><>>><<<<>>><<<>>>><<><<<<>>><<<<>>>><>>><<<<>>>><<<>><<>>>><<<<>>><<<>>><>>><<<<><<<<>>>><<><<<>>>><<>><<<>>>><<<>><<<<>>>><<<>>><<<<>>><>><<<<>>>><<><<<><<>><><<<<><<<<>><<>>>><<<>><<<>><<>>>><<<>><<<>>><<<<><<<>>><><<<><<<><><<>>><>><<<<>>>><<<>>><<<<><>>><<<<>>><>><<<>>>><<<>>>><<<>><<<>>><<<><<<<><<<<><>>><>><<<><<<<>>><<<<><<>>><<<<>><<>>><<<<>>>><<<><<>>><><<<>>><<<>>><>><<>>>><><<><><<<<>>><<<<><<>>><>>><<<<>>>><<<>><<>><<<><<>><<>>>><<<<>>><<<<>>><>>>><<<<>><<<><<<>>><>>>><<<<>>><<<<>>>><<<>>><>><>><<<>>><<<<>>>><<>><<<>><>><><<<<>><>>>")

(defn horizontal-piece [height]
  (list [3 (+ height 4)]
        [4 (+ height 4)]
        [5 (+ height 4)]
        [6 (+ height 4)]))

(defn plus-piece [height]
  (list [4 (+ height 4)]
        [3 (+ height 5)]
        [4 (+ height 5)]
        [5 (+ height 5)]
        [4 (+ height 6)]))

(defn l-piece [height]
  (list [3 (+ height 4)]
        [4 (+ height 4)]
        [5 (+ height 4)]
        [5 (+ height 5)]
        [5 (+ height 6)]))

(defn vertical-piece [height]
  (list [3 (+ height 4)]
        [3 (+ height 5)]
        [3 (+ height 6)]
        [3 (+ height 7)]))

(defn square-piece [height]
  (list [3 (+ height 4)]
        [3 (+ height 5)]
        [4 (+ height 4)]
        [4 (+ height 5)]))

(def floor #{[1 0] [2 0] [3 0] [4 0] [5 0] [6 0] [7 0]})

(defn move-left [piece]
  (map (fn [[x y]] [(dec x) y]) piece))

(defn move-right [piece]
  (map (fn [[x y]] [(inc x) y]) piece))

(defn move-down [piece]
  (map (fn [[x y]] [x (dec y)]) piece))

(defn hits-wall? [piece]
  (not (empty? (filter (fn [[x y]] (or (zero? x) (= 8 x))) piece))))

(defn piece-hits? [piece piece-points]
  (not (empty? (set/intersection piece-points (set piece)))))

(defn move-piece-direction [piece direction]
  (cond (= direction "<") (move-left piece)
        (= direction ">") (move-right piece)))

(defn drop-piece [piece-fn jets-amt piece-points floor]
  (let [moves (str/split real-str #"")]
    (loop [move-place jets-amt
           move-down? false
           piece (piece-fn (last (last (sort-by second (set/union piece-points floor)))))]
      (if (empty? moves)
        piece
        (let [new-piece (if move-down? (move-down piece) (move-piece-direction piece (nth moves move-place)))]
          (cond
            (hits-wall? new-piece)
            (recur (mod (if move-down? move-place (inc move-place)) (count moves))
                   (not move-down?)
                   piece)

            (piece-hits? new-piece piece-points)
            (if move-down?
              [(mod (if move-down? move-place (inc move-place)) (count moves)) piece]
              (recur (mod (inc move-place) (count moves))
                     (not move-down?)
                     piece))

            (piece-hits? new-piece floor)
            [(mod (if move-down? move-place (inc move-place)) (count moves)) piece]

            :else (recur (mod (if move-down? move-place (inc move-place)) (count moves))
                         (not move-down?)
                         new-piece)))))))

(def piece-fn-order [horizontal-piece plus-piece l-piece vertical-piece square-piece])

(defn part-1 []
  (loop [piece-order-cnt 0
         jets-amt 0
         count-pieces 0
         rested-pieces #{}]
    (if (= count-pieces 2022)
      (last (sort-by second rested-pieces))
      (let [[next-jets-amt rested-piece] (drop-piece (nth piece-fn-order piece-order-cnt) jets-amt rested-pieces floor)]
        (recur (mod (inc piece-order-cnt) (count piece-fn-order))
               next-jets-amt
               (inc count-pieces)
               (set/union rested-pieces (set rested-piece)))))))



;; There's something cyclic about when there is a full row filled (rocks are filling all x values on a row)
;; Data-wise when that happens we don't need to hold onto ANY of the rocks below

(defn remove-when-row-full [rested-pieces]
  (let [largest-full-row (->> (sort-by second rested-pieces)
                              (partition-by second)
                              (map-indexed (fn [i r] [(inc i) (count r)]))
                              (filter #(= (second %) 7))
                              last)]
    (if (nil? largest-full-row)
      rested-pieces
      (set (remove #(< (second %) (first largest-full-row)) rested-pieces)))))

;(defn part-2 []
;  (loop [piece-order-cnt 0
;         jets-amt 0
;         count-pieces 0
;         rested-pieces #{}]
;    (println count-pieces)
;    (if (= count-pieces 1000000000000)
;      (last (sort-by second rested-pieces))
;      (let [[next-jets-amt rested-piece] (drop-piece (nth piece-fn-order piece-order-cnt) jets-amt rested-pieces floor)]
;        ;(println next-jets-amt rested-piece)
;        (recur (mod (inc piece-order-cnt) (count piece-fn-order))
;               next-jets-amt
;               (inc count-pieces)
;               (remove-when-row-full (set/union rested-pieces (set rested-piece))))))))

(defn top-row-flat? [rested-pieces]
  (let [top-row (->> (sort-by second rested-pieces)
                     (partition-by second)
                     last)]
    [(= 7 (count top-row)) (last (first top-row))]))

(defn make-floor [height] #{[1 height] [2 height] [3 height] [4 height] [5 height] [6 height] [7 height]})

(defn part-2-testing [height poc jets count-pc]
  (let [flr (make-floor height)]
    (loop [piece-order-cnt poc
           jets-amt jets
           count-pieces count-pc
           rested-pieces #{}]
      (println "counting" count-pieces)
      (let [[top-flat? flat-y] (top-row-flat? rested-pieces)]
        (cond
          top-flat? [false (list flat-y piece-order-cnt jets-amt count-pieces)]

          (= count-pieces 1000000000000)
          [true (last (sort-by second rested-pieces))]

          :else
          (let [[next-jets-amt rested-piece] (drop-piece (nth piece-fn-order piece-order-cnt) jets-amt rested-pieces flr)]
            (recur (mod (inc piece-order-cnt) (count piece-fn-order))
                   next-jets-amt
                   (inc count-pieces)
                   (set/union rested-pieces (set rested-piece)))))))))

(defn part-2-moonshot []
  (loop [y 1569054433044
         poc 1
         jets 5917
         cnt-pieces 999999994776]
    (println "loop" y poc jets cnt-pieces)
    (let [[done? [a b c d]] (part-2-testing y poc jets cnt-pieces)]
      (if done? b
                (recur a b c d)))))

;; I used this next-iteration function to get close enough to the cnt-pieces above I wanted
;; The next-iteration function values were calculated below by finding what iterations there was a piece that
;; makes a tetris as the very top row of the pieces. When this happens you can make that the new floor and get rid of the
;; other points below the new floor because new pieces will never interact with them.

;; Once you find the iterations where this tetris happens with the last piece you can start the regular game with the new floor
;; and the pieces count that comes along for the ride.

(defn next-iteration [itrs]
  [(+ 1582 (* itrs 942) (* itrs 1796)) (+ 1021 (* itrs 590) (* itrs 1155))])

;; Using this in the repl
; (- 1000000000000 (second (next-iteration 573065899))) => 5224
; That means the regular process can take place with the tetris game and it only has to run through 5224 iterations
; rather than the 1000000000000

;; Printouts of loop info
;loop 0 0 0 0
;loop 1582 1 5917 1021
;loop 2524 1 9344 1611 (+942,  1, 9344,  +590)
;loop 4320 1 5917 2766 (+1796, 1, 5917, +1155)
;loop 5262 1 9344 3356 (+942,  1, 9344,  +590)
;loop 7058 1 5917 4511
;loop 8000 1 9344 5101
;loop 9796 1 5917 6256
;loop 10738 1 9344 6846
;loop 12534 1 5917 8001
;loop 13476 1 9344 8591
;loop 15272 1 5917 9746
;loop 16214 1 9344 10336
;loop 18010 1 5917 11491
;loop 18952 1 9344 12081
;loop 20748 1 5917 13236
;loop 21690 1 9344 13826
;loop 23486 1 5917 14981
;loop 24428 1 9344 15571
;loop 26224 1 5917 16726
;loop 27166 1 9344 17316
;loop 28962 1 5917 18471
;loop 29904 1 9344 19061
;loop 31700 1 5917 20216
;loop 32642 1 9344 20806
;loop 34438 1 5917 21961
;loop 35380 1 9344 22551
;loop 37176 1 5917 23706
;loop 38118 1 9344 24296
;loop 39914 1 5917 25451
;loop 40856 1 9344 26041
;loop 42652 1 5917 27196
;loop 43594 1 9344 27786
;loop 45390 1 5917 28941
;loop 46332 1 9344 29531
;loop 48128 1 5917 30686
;loop 49070 1 9344 31276